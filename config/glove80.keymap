/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1      &kp F2    &kp F3        &kp F4    &kp F5                                                                                       &kp F6  &kp F7     &kp F8   &kp F9            &kp F10
&kp EQUAL   &kp N1    &kp N2        &kp N3    &kp N4     &kp N5                                                                    &kp N6  &kp N7  &kp N8     &kp N9   &kp N0            &kp RS(EQUAL)
&kp TAB     &kp Q     &kp W         &kp E     &kp R      &kp T                                                                     &kp Y   &kp U   &kp I      &kp O    &kp P             &kp SEMICOLON
&kp ESC     &kp A     &kp S         &kp D     &kp F      &kp G                                                                     &kp H   &kp J   &kp K      &kp L    &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&kp GRAVE   &kp Z     &kp X         &kp C     &kp V      &kp B   &kp LSHFT  &kp LCTRL  &to 1     &kp LGUI  &kp RCTRL  &kp RSHFT    &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH          &kp PG_UP
&magic 3 0  &kp HOME  &kp CAPSLOCK  &kp LEFT  &kp RIGHT          &kp BSPC   &kp DEL    &kp LALT  &kp RALT  &kp RET    &lt 2 SPACE          &kp UP  &kp DOWN   &kp F13  &kp K_COFFEE      &kp PG_DN
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp K_MUTE  &kp C_VOL_DN  &kp C_VOL_UP                                                                                       &kp K_PLAY_PAUSE  &kp C_AC_ZOOM_IN  &kp C_AC_ZOOM_OUT  &none            &kp PAUSE_BREAK
&trans        &none         &none       &none         &none         &kp HOME                                                   &kp RS(RIGHT_BRACKET)     &kp KP_NUM        &kp KP_EQUAL      &kp KP_DIVIDE      &kp KP_MULTIPLY  &kp PSCRN
&trans        &none         &none       &kp UP        &none         &kp END                                                    &kp RS(NON_US_BACKSLASH)  &kp KP_N7         &kp KP_N8         &kp KP_N9          &kp KP_MINUS     &kp SLCK
&trans        &none         &kp LEFT    &kp DOWN      &kp RIGHT     &kp PG_UP                                                  &kp RS(MINUS)             &kp KP_N4         &kp KP_N5         &kp KP_N6          &kp NUMBER_1     &none
&trans        &kp K_CMENU   &none       &kp F11       &kp F12       &kp PG_DN  &trans  &trans  &to 0   &trans  &trans  &trans  &kp COMMA                 &kp KP_N1         &kp KP_N2         &kp KP_N3          &kp KP_ENTER     &trans
&trans        &kp CAPS      &kp INS     &kp F11       &kp F12                  &trans  &trans  &trans  &trans  &trans  &trans                            &kp KP_N0         &kp KP_N0         &kp KP_DOT         &kp KP_ENTER     &trans
            >;
        };

        SYMBOLS {
            bindings = <
&trans  &trans      &trans                &trans                 &trans                                                                                                                                      &trans         &trans         &trans         &trans     &trans
&trans  &kp RA(N1)  &kp RA(N7)            &kp RA(NUMBER_3)       &kp RA(SLASH)      &kp RS(MINUS)                                                                                         &trans             &trans         &trans         &trans         &trans     &trans
&trans  &kp RA(V)   &kp RA(Q)             &kp RS(RIGHT_BRACKET)  &kp RS(BACKSLASH)  &kp RA(COMMA)                                                                                         &trans             &kp NUMBER_1   &kp SLASH      &kp RS(MINUS)  &trans     &trans
&trans  &kp RA(C)   &kp RA(W)             &kp RA(F)              &kp RA(G)          &kp RA(PERIOD)                                                                                        &kp RS(SEMICOLON)  &kp RA(P)      &kp RS(SLASH)  &kp MINUS      &kp GRAVE  &trans
&trans  &kp RA(X)   &kp RS(LEFT_BRACKET)  &kp RA(B)              &kp RA(N)          &kp MINUS       &kp LEFT_SHIFT  &kp LEFT_CONTROL  &trans  &trans  &kp RIGHT_CONTROL  &kp RIGHT_SHIFT  &trans             &kp RS(COMMA)  &kp RS(SQT)    &trans         &trans     &trans
&trans  &trans      &trans                &trans                 &trans                             &trans          &trans            &trans  &trans  &trans             &trans                              &trans         &trans         &trans         &trans     &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 4
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };
    };
};
